<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="topologyMapper">

	<!-- [Test code] -->
	<select id="selectItemList" resultMap="ItemMap">
		SELECT
		`part_project_code`, `part_name`
		FROM
		tb_part
	</select>

	<select id="getDBServerTime" resultType="string">
		select now()
	</select>


	<!-- *************************** PARTS *************************** -->

	<!-- tb_parts 전체를 받아옴 Limit #page, #rowsPerPage -->
	<select id="selectPartsItemList" resultMap="PartsItemMap">
		SELECT
		`part_id`,
		`part_project_code`, `part_name`, `part_desc`, `part_location`,
		`part_cost`, `part_stock`, `part_memo`, `part_mlslevel`
		FROM
		tb_part
		order by part_id desc
	</select>

	<!-- tb_parts rows -->
	<select id="queryPartsItemsRow" resultType="string">
		select count(*) as
		cnt
		from tb_part
	</select>

	<insert id="insertPartsItem">
		INSERT INTO tb_part (
		`part_id` ,
		`part_project_code` ,
		`part_name` ,
		`part_desc` ,
		`part_location` ,
		`part_cost` ,
		`part_stock` ,
		`part_memo`,
		`part_msllevel`
		)
		VALUES (
		NULL , #{partProjectCode},
		#{partName},
		#{partDesc},
		#{partLocation}, #{partCost},
		#{partStock},
		#{partMemo}, #{partMsllevel}
		);
	</insert>

	<!-- tb_project 정보변경 -->
	<update id="updatePartsItem">
		UPDATE tb_part
		SET
		`part_project_code` =
		#{partProjectCode},
		`part_name`= #{partName} ,
		`part_desc`= #{partDesc}
		,
		`part_location`= #{partLocation} ,
		`part_cost`= #{partCost} ,
		`part_stock`= #{partStock} ,
		`part_memo` = #{partMemo},
		`part_msllevel`= #{partMsllevel}
		WHERE
		CONVERT(
		`tb_part`.`part_id`
		USING
		utf8
		) =
		#{partId} LIMIT 1;
	</update>

	<delete id="deletePartsItem">
		DELETE FROM tb_part
		WHERE
		CONVERT(
		`tb_part`.`part_id`
		USING utf8
		) =
		#{partId} LIMIT 1
		;
	</delete>


	<!-- *************************** USER *************************** -->
	<!-- tb_user 전체를 받아옴 -->
	<select id="selectUserItemList" resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`, `user_teamname`,
		`user_level`
		FROM
		tb_user
	</select>

	<select id="selectUserItemListForLogin" parameterType="String"
		resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		FROM
		tb_user
		WHERE
		`user_id` =
		#{logingUserId} AND `user_password`
		= #{loginUserPassword}
	</select>



	<!-- tb_user 전체 row -->
	<select id="queryUserItemsRow" resultType="string">
		select count(*) as cnt
		from tb_user
	</select>

	<insert id="insertUserItem">
		INSERT INTO tb_user(
		`user_id` , `user_name`,
		`user_password` ,
		`user_email` ,
		`user_teamname` ,
		`user_level`
		)
		VALUES (
		#{userId}, #{userName},
		#{userPassword}, #{userEmail}, #{userTeamname},
		#{userLevel}
		)
	</insert>

	<!-- tb_user 비밀번호 변경 -->
	<update id="updateUserItem4PwChange">
		UPDATE tb_user
		SET
		`user_password` = #{userPassword}
		WHERE
		CONVERT(
		`tb_user`.`user_id`
		USING utf8
		) =
		#{userId} LIMIT 1 ;
	</update>

	<!-- tb_user 사용자 정보변경, 비밀번호 제외 -->
	<update id="updateUserItem">
		UPDATE tb_user
		SET
		`user_name` = #{userName},
		`user_email` = #{userEmail},
		`user_teamname` = #{userTeamname},
		`user_level` = #{userLevel}
		WHERE
		CONVERT(
		`tb_user`.`user_id`
		USING utf8
		) =
		#{userId} LIMIT 1 ;
	</update>


	<!-- *************************** PROJECT *************************** -->

	<!-- tb_project 전체를 받아옴 -->
	<select id="selectProjectItemList" resultMap="ProjectItemMap">
		SELECT
		`project_code`, `project_name`, `project_owner_id`,
		`project_shipper_id`
		FROM
		tb_project
	</select>

	<!-- tb_project row 갯수(페이징카운트) -->
	<select id="queryProjectItemsRow" resultType="string">
		select count(*) as
		cnt from tb_project
	</select>

	<insert id="insertProjectItem">
		INSERT INTO tb_project(
		`project_code` ,
		`project_name`,
		`project_owner_id` ,
		`project_shipper_id`
		)
		VALUES (
		#{projectCode}, #{projectName},
		#{projectOwnerId},
		#{projectShipperId}
		)
	</insert>

	<!-- tb_project 정보변경 -->
	<update id="updateProjectItem">
		UPDATE tb_project
		SET
		`project_name` = #{projectName},
		`project_owner_id` = #{projectOwnerId},
		`project_shipper_id` =
		#{projectShipperId}
		WHERE
		CONVERT(
		`tb_project`.`project_code`
		USING utf8
		) =
		#{projectCode} LIMIT 1 ;
	</update>

	<!-- tb_project 정보삭제 -->
	<delete id="deleteProjectItem">
		DELETE FROM tb_project
		WHERE
		CONVERT(
		`tb_project`.`project_code`
		USING utf8
		) =
		#{projectCode} LIMIT 1
		;
	</delete>
	<!-- ********************************************* -->


	<!-- *************************** Join 처리한 테이블 *************************** -->
	<!-- Seach Type 1 - 프로젝트CODE -->
	<select id="queryJoinedPartsItemByProjectCode" parameterType="String"
		resultMap="JoinedPartsItemMap">
		SELECT
		t2.part_id 'part_id' #part_id
		, t1.project_code
		'project_code' #Project Code
		,
		t3.user_teamname 'user_teamname' #개발자부서
		,
		t3.user_name 'owner_korname'
		#개발담당자
		, t4.user_name 'shipper_korname'
		#출고담당자
		, t2.part_name 'part_name'
		#LGIT P/N
		, t2.part_desc 'part_desc'
		#Item Desc
		, t2.part_stock
		'part_stock' #재고
		, t2.part_location
		'part_location' #위치
		, t2.part_cost
		'part_cost' #단가
		, t2.part_memo
		'part_memo' #비고
		, t2.part_msllevel 'part_msllevel' #MslLevel
		FROM
		tb_project AS t1
		INNER
		JOIN (tb_part AS t2, tb_user
		AS t3, tb_user AS t4
		)
		ON
		(t1.project_code =
		t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t1.project_code =
		#{keyWord})
		ORDER BY t2.part_id DESC
	</select>

	<!-- Seach Type 2 - 출고자이름으로 -->
	<select id="queryJoinedPartsItemByShipperName" parameterType="String"
		resultMap="JoinedPartsItemMap">
		SELECT
		t2.part_id 'part_id' #part_id
		, t1.project_code
		'project_code' #Project Code
		, t3.user_teamname 'user_teamname' #개발자부서
		, t3.user_name 'owner_korname' #개발담당자
		, t4.user_name 'shipper_korname'
		#출고담당자
		, t2.part_name 'part_name' #LGIT P/N
		, t2.part_desc 'part_desc'
		#Item Desc
		, t2.part_stock 'part_stock' #재고
		, t2.part_location
		'part_location' #위치
		, t2.part_cost 'part_cost' #단가
		, t2.part_memo
		'part_memo' #비고
		, t2.part_msllevel 'part_msllevel' #MslLevel
		FROM
		tb_project AS t1
		INNER JOIN (tb_part AS t2, tb_user
		AS t3, tb_user AS t4
		)
		ON
		(t1.project_code = t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t4.user_name =
		#{keyWord})
		ORDER BY t2.part_id DESC
	</select>

	<!-- Seach Type 3 - 개발자이름으로 -->
	<select id="queryJoinedPartsItemByOwnerName" parameterType="String"
		resultMap="JoinedPartsItemMap">
		SELECT
		t2.part_id 'part_id' #part_id
		, t1.project_code
		'project_code' #Project Code
		, t3.user_teamname 'user_teamname' #개발자부서
		, t3.user_name 'owner_korname' #개발담당자
		, t4.user_name 'shipper_korname'
		#출고담당자
		, t2.part_name 'part_name' #LGIT P/N
		, t2.part_desc 'part_desc'
		#Item Desc
		, t2.part_stock 'part_stock' #재고
		, t2.part_location
		'part_location' #위치
		, t2.part_cost 'part_cost' #단가
		, t2.part_memo
		'part_memo' #비고
		, t2.part_msllevel 'part_msllevel' #MslLevel
		FROM
		tb_project AS t1
		INNER JOIN (tb_part AS t2, tb_user
		AS t3, tb_user AS t4
		)
		ON
		(t1.project_code = t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t3.user_name =
		#{keyWord})
		ORDER BY t2.part_id DESC
	</select>

	<!-- Seach Type 4 - PART_NAME으로 -->
	<select id="queryJoinedPartsItemByPartsName" parameterType="String"
		resultMap="JoinedPartsItemMap">
		SELECT
		t2.part_id 'part_id' #part_id
		, t1.project_code
		'project_code' #Project Code
		, t3.user_teamname 'user_teamname' #개발자부서
		, t3.user_name 'owner_korname' #개발담당자
		, t4.user_name 'shipper_korname'
		#출고담당자
		, t2.part_name 'part_name' #LGIT P/N
		, t2.part_desc 'part_desc'
		#Item Desc
		, t2.part_stock 'part_stock' #재고
		, t2.part_location
		'part_location' #위치
		, t2.part_cost 'part_cost' #단가
		, t2.part_memo
		'part_memo' #비고
		, t2.part_msllevel 'part_msllevel' #MslLevel
		FROM
		tb_project AS t1
		INNER JOIN (tb_part AS t2, tb_user
		AS t3, tb_user AS t4
		)
		ON
		(t1.project_code = t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t2.part_name =
		#{keyWord})
		ORDER BY t2.part_id DESC
	</select>

	<!-- 출고요청파츠 List -->
	<select id="queryShipPartsListItems" parameterType="String"
		resultMap="JoinedShipPartsListItemMap">
		SELECT *
		FROM
		tb_shipreq_itemlist AS t1
		INNER JOIN (tb_part AS
		t2)
		ON
		(t1.itemlist_part_id = t2.part_id)
		AND
		t1.itemlist_owner_id =
		#{userId1}
		AND
		t1.itemlist_ship_id = #{itemlistShipId}
		ORDER BY
		t1.itemlist_id DESC;
	</select>

	<update id="updateShipReqPartsItem">
		UPDATE tb_shipreq_itemlist
		SET
		`itemlist_amount` =
		#{itemlistAmount}
		WHERE
		`itemlist_id` = #{itemlistId};

	</update>

	<!-- 출고요청파츠 delete -->
	<delete id="deleteShipPartsItem">
		DELETE FROM tb_shipreq_itemlist
		WHERE
		`itemlist_id` =
		#{itemlistId};
	</delete>

	<insert id="insertShipReqPartsItem">
		INSERT INTO tb_shipreq_itemlist(
		`itemlist_owner_id` ,
		`itemlist_ship_id`,
		`itemlist_part_id` ,
		`itemlist_amount`
		)
		VALUES (
		#{userId}, #{itemlistShipId},
		#{itemlistPartId},
		#{itemlistAmount}
		)
	</insert>



	<select id="selectUserItemListByID" parameterType="String"
		resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		FROM
		tb_user
		WHERE
		`user_id` =
		#{logingUserId}
	</select>

	<!-- Seach Type 나만빼고 - 개발자이름으로 -->
	<select id="queryOthersJoinedPartsItemByOwnerName"
		parameterType="String" resultMap="JoinedPartsItemMap">
		SELECT
		t2.part_id 'part_id'
		,
		t1.project_code 'project_code'
		, t3.user_teamname 'user_teamname'
		,
		t3.user_name 'owner_korname'
		, t4.user_name 'shipper_korname'
		,
		t2.part_name 'part_name'
		, t2.part_desc 'part_desc'
		, t2.part_stock
		'part_stock'
		,
		t2.part_location 'part_location'
		, t2.part_cost
		'part_cost'
		, t2.part_memo 'part_memo'
		, t2.part_msllevel
		'part_msllevel'
		FROM
		tb_project AS t1
		INNER JOIN
		(tb_part
		AS t2,
		tb_user
		AS
		t3, tb_user AS t4
		)
		ON
		(t1.project_code =
		t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t3.user_name !=
		#{keyWord})
		ORDER BY t2.part_id DESC
	</select>

	<!-- *************************** ShipReq *************************** -->
	<insert id="insertShipReqItem">
		INSERT INTO tb_shipreq(
		`ship_requestor_id`,
		`ship_destination`,
		`ship_today`,
		`ship_targetdate`,
		`ship_project_code`,
		`ship_memo`,
		`ship_ismyproject`,
		`ship_state_id`,
		`ship_coworker_userid`,
		`ship_req_deliverymethod`,
		`ship_delivered_datemethod`,
		`ship_rejectcause`
		)
		VALUES (
		#{shipRequestorId},
		#{shipDestination},
		#{shipToday},
		#{shipTargetdate},
		#{shipProjectCode},
		#{shipMemo},
		#{shipIsmyproject},
		#{shipStateId},
		#{shipCoworkerUserid},
		#{shipReqDeliveryMethod},
		#{shipDeliveredDateMethod},
		#{shipRejectCause}
		)

	</insert>

	<select id="queryShipReqListItems" parameterType="String"
		resultMap="ShipReqItemMap">
		SELECT
		*
		FROM
		tb_shipreq
		INNER JOIN (tb_shipstate, tb_project,
		tb_user)
		WHERE
		tb_shipreq.`ship_state_id` = tb_shipstate.`shipstate_id`
		AND
		tb_shipreq.`ship_project_code` = tb_project.`project_code`
		AND
		tb_project.`project_shipper_id` = tb_user.`user_id`
		AND
		`ship_requestor_id` =
		#{UserId}
		ORDER BY
		ship_id DESC;
	</select>


	<select id="queryShipReqListItemsByShipId" parameterType="String"
		resultMap="ShipReqItemMap">
		SELECT
		*
		FROM
		tb_shipreq
		INNER JOIN (tb_shipstate, tb_project,
		tb_user)
		WHERE
		tb_shipreq.`ship_state_id` = tb_shipstate.`shipstate_id`
		AND
		tb_shipreq.`ship_project_code` = tb_project.`project_code`
		AND
		tb_project.`project_shipper_id` = tb_user.`user_id`
		AND
		`ship_id` =
		#{shipId}
		ORDER BY
		ship_id DESC;
	</select>

	<update id="updateShipParts_ShipId" parameterType="String">
		UPDATE
		tb_shipreq_itemlist
		SET `itemlist_ship_id` = #{NewShipId} WHERE
		`itemlist_ship_id` = #{OldShipId} AND
		itemlist_owner_id = #{UserId};
	</update>

	<select id="queryShipReqListItemsForShipper" parameterType="String"
		resultMap="ShipReqItemMap">
		SELECT
		*
		FROM
		tb_shipreq
		INNER JOIN (tb_shipstate, tb_project,
		tb_user)
		WHERE
		tb_shipreq.`ship_state_id` = tb_shipstate.`shipstate_id`
		AND
		tb_shipreq.`ship_project_code` = tb_project.`project_code`
		AND
		tb_project.`project_shipper_id` = tb_user.`user_id`
		AND
		(`ship_state_id` = 3
		or `ship_state_id` = 4
		or `ship_state_id` = 5
		or
		`ship_state_id` = 6)
		AND
		`project_shipper_id` =
		#{UserId}
		ORDER BY
		ship_id
		DESC;
	</select>


	<update id="updateShipReqState_ShipId" parameterType="String">
		UPDATE
		tb_shipreq
		SET `ship_state_id` = #{newShipStateId},
		`ship_rejectcause` = #{shipRejectCause},
		`ship_delivered_datemethod` = #{shipDeliveredDateMethod}
		 WHERE
		`ship_id` =
		#{shipId} ;
	</update>


	<!-- *************************** 프로젝트 관리 *************************** -->

	<!-- tb_project 전체를 받아옴 -->
	<select id="queryProjectItemsByID" resultMap="ProjectItemMap">
		SELECT
		`project_code`, `project_name`, `project_owner_id`,
		`project_shipper_id`
		FROM
		tb_project
		where
		`project_owner_id` = #{UserId};
	</select>


	<select id="selectPartsItemListByID" parameterType="String"
		resultMap="PartsItemMap">
		SELECT
		t2.part_id 'part_id'
		,t2.part_project_code
		'part_project_code'
		,t2.part_name 'part_name'
		,t2.part_desc 'part_desc'
		,t2.part_location 'part_location'
		,t2.part_cost 'part_cost'
		,t2.part_stock 'part_stock'
		,t2.part_memo 'part_memo'
		, t2.part_msllevel
		'part_msllevel'
		FROM
		tb_project AS
		t1
		INNER JOIN (tb_part AS t2, tb_user
		AS t3, tb_user AS t4 )
		ON
		(t1.project_code = t2.part_project_code)
		AND
		(t1.project_owner_id =
		t3.user_id)
		AND
		(t1.project_shipper_id =
		t4.user_id)
		AND
		(t3.user_id =
		#{UserId})
		ORDER BY t2.part_id DESC
	</select>

	<!-- 출고담당자 리스트 query -->

	<select id="selectShipperUserItem" resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		FROM
		tb_user
		WHERE
		`user_level` = 3;
	</select>

	<!-- ShipId로 부품리스트 가져오기 -->
	<select id="queryShipReqListItemsByShipid" parameterType="String"
		resultMap="JoinedShipPartsListItemMap">
		SELECT *
		FROM
		tb_shipreq_itemlist AS t1
		INNER JOIN (tb_part AS
		t2)
		ON
		(t1.itemlist_part_id = t2.part_id)
		AND
		t1.itemlist_ship_id =
		#{itemlistShipId}
		ORDER BY
		t1.itemlist_id DESC;
	</select>

	<!-- parts 재고감소 -->

	<update id="updateMinusStockToTBPart" parameterType="String">
		UPDATE
		tb_part
		SET `part_stock` = `part_stock` - #{minus_amount}
		WHERE
		`part_id` = #{part_id};
	</update>


	<!-- Parts Id로 owner의 User정보 -->
	<select id="queryUserItemByPartId" parameterType="String"
		resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		from tb_part as t1
		inner join (tb_project
		as t2, tb_user as t3)
		on
		t1.part_project_code = t2.project_code
		and
		t2.project_owner_id = t3.user_id
		and
		t1.part_id = #{partId};
	</select>

	<!-- 나의 장바구니에서 shipid가 -2인 partid의 onwer정보 1개만 -->

	<select id="queryUserItemByCartOwnerId_minus2" parameterType="String"
		resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		from
		tb_shipreq_itemlist as t1
		inner join(
		tb_part as t2,
		tb_project as t3,
		tb_user as t4
		)
		on
		t1.itemlist_part_id =
		t2.part_id
		and
		t1.itemlist_ship_id = -2
		and
		t1.itemlist_owner_id =
		#{UserId}
		and
		t2.part_project_code = t3.project_code
		and
		t3.project_owner_id = t4.user_id
		LIMIT 0 , 1

	</select>

	<!-- 파트너 출고요청리스트 . 내가 coworker 인 shipreq 리스트 -->

	<select id="queryMyConfirmShipReqListItems" parameterType="String"
		resultMap="ShipReqItemMap">
		SELECT
		*
		FROM
		tb_shipreq
		INNER JOIN (tb_shipstate, tb_project,
		tb_user)
		WHERE
		tb_shipreq.`ship_state_id` = tb_shipstate.`shipstate_id`
		AND
		tb_shipreq.`ship_project_code` = tb_project.`project_code`
		AND
		tb_project.`project_shipper_id` = tb_user.`user_id`
		AND
		`ship_coworker_userid` =
		#{UserId}
		ORDER BY
		ship_id DESC;
	</select>

	<!-- tb_parts 에서 내 자재중에 ProjectCode&PartName검색결과 -->
	<select id="queryPartsProjectAndParts_TBPart" resultMap="PartsItemMap"
		parameterType="String">
		SELECT
		`part_id`,
		`part_project_code`, `part_name`,
		`part_desc`, `part_location`,
		`part_cost`, `part_stock`,
		`part_memo`,`part_msllevel`
		FROM
		tb_part as t1
		inner join(tb_project as
		t2)
		ON
		t1.part_project_code =
		t2.project_code
		AND
		t1.part_project_code =
		#{PartProjectCode}
		AND
		t1.part_name =
		#{PartName}
		AND
		t2.project_owner_id =
		#{UserId};
	</select>

	<!-- tb_parts 에서 내 자재중에 PartName으로 PartID 검색 -->
	<select id="queryMyPartsIDByPartName_TBPart" resultMap="PartsItemMap"
		parameterType="String">
		SELECT
		`part_id`,
		`part_project_code`, `part_name`,
		`part_desc`, `part_location`,
		`part_cost`, `part_stock`,
		`part_memo`,`part_msllevel`
		FROM
		tb_part as t1
		inner join(tb_project as
		t2)
		ON
		t1.part_project_code =
		t2.project_code
		AND
		t2.project_owner_id =
		#{UserId}
		AND
		t1.part_name =
		#{PartName};
	</select>


	<!-- Parts Id로 owner의 User정보 -->
	<select id="queryUserItemsbyName" parameterType="String"
		resultMap="UserItemMap">
		SELECT
		`user_id`,
		`user_name`,
		`user_password`, `user_email`,
		`user_teamname`,
		`user_level`
		FROM
		tb_user as t1
		WHERE
		t1.user_name =
		#{UserName};
	</select>

	<select id="queryProjectItemsByShipperID" resultMap="ProjectItemMap">
		SELECT
		`project_code`, `project_name`, `project_owner_id`,
		`project_shipper_id`
		FROM
		tb_project
		where
		`project_shipper_id` =
		#{UserId};
	</select>



	<!-- tb_parts 에서 출고담당자의 자재중에 ProjectCode&PartName검색결과 -->
	<select id="queryPartsProjectAndPartsByShipperId_TBPart"
		resultMap="PartsItemMap" parameterType="String">
		SELECT
		`part_id`,
		`part_project_code`, `part_name`,
		`part_desc`, `part_location`,
		`part_cost`, `part_stock`, `part_memo`,`part_msllevel`
		FROM
		tb_part as
		t1
		inner
		join(tb_project as t2)
		ON
		t1.part_project_code =
		t2.project_code
		AND
		t1.part_project_code =
		#{PartProjectCode}
		AND
		t1.part_name =
		#{PartName}
		AND
		t2.project_shipper_id = #{UserId};
	</select>

	<delete id="deleteMyShipReqItemList">
		DELETE FROM
		tb_shipreq_itemlist
		WHERE
		`tb_shipreq_itemlist`.`itemlist_ship_id` =
		#{itemlistShipId}
		AND
		CONVERT(
		`tb_shipreq_itemlist`.`itemlist_owner_id`
		USING utf8
		) =
		#{userId};
	</delete>


	<delete id="deleteShipReqItem">
		DELETE FROM
		tb_shipreq
		WHERE
		ship_id = #{shipId};
	</delete>



	<!-- *************************** LOG for User Operation *************************** -->
	<insert id="insertLogUserItem">
		INSERT INTO `tb_user_log` (
		`log_id` ,
		`log_date` ,
		`log_clientip` ,
		`log_user` ,
		`log_action`
		)
		VALUES (
		NULL , #{logDate},
		#{logClientIP}, #{logUser}, #{logAction}
		);
	</insert>

	<select id="queryLogUserItems" resultMap="LogUserItemMap">
		SELECT *
		FROM
		`tb_user_log`
		ORDER BY `log_id` DESC
	</select>

</mapper>
